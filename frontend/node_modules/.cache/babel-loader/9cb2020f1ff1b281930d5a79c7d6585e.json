{"ast":null,"code":"var _jsxFileName = \"/Users/lax001/My Documents/Web Dev - Hyperion/Paired project/frontend/src/pages/NotePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { ReactComponent as ArrowLeft } from \"../assets/chevron-back-outline.svg\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NotePage = () => {\n  _s();\n\n  let noteId = useParams().id;\n  let [note, setNote] = useState([null]);\n  let history = useNavigate();\n  useEffect(() => {\n    getNote();\n  }, [noteId]);\n\n  let getNote = async () => {\n    if (noteId === \"new\") return; // if the route is /note/new then don't make api request to backend\n\n    let response = await fetch(`/api/notes/${noteId}/`);\n    let data = await response.json();\n    setNote(data);\n  };\n\n  let createNote = async () => {\n    fetch(`/api/notes/create/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(note)\n    });\n  };\n\n  let updateNote = async () => {\n    fetch(`/api/notes/${noteId}/update/`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(note)\n    });\n  };\n\n  let deleteNote = async () => {\n    fetch(`/api/notes/${noteId}/delete/`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    history(\"/\");\n  };\n\n  let handleSubmit = () => {\n    console.log(\"NOTE:\", note);\n\n    if (noteId !== \"new\" && note.body === \"\") {\n      deleteNote();\n    } else if (noteId !== \"new\") {\n      updateNote();\n    } else if (noteId === \"new\" && note.body !== null) {\n      createNote();\n    }\n\n    history(\"/\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n          onClick: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), noteId !== \"new\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: e => {\n        setNote({ ...note,\n          body: e.target.value\n        });\n      },\n      value: note === null || note === void 0 ? void 0 : note.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NotePage, \"wYATufIupR1HeWz0NwkCrwyU8AA=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = NotePage;\nexport default NotePage; // could use {match} in react router v4 and v5\n//  import React from 'react';\n//  const NotePage = ({match}) => {\n//  let noteId = match.params.id\n//    return <div> Single Page {noteId}</div>;\n//  };\n//  export default NotePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"sources":["/Users/lax001/My Documents/Web Dev - Hyperion/Paired project/frontend/src/pages/NotePage.js"],"names":["React","useState","useEffect","useParams","useNavigate","ReactComponent","ArrowLeft","Link","NotePage","noteId","id","note","setNote","history","getNote","response","fetch","data","json","createNote","method","headers","body","JSON","stringify","updateNote","deleteNote","handleSubmit","console","log","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { ReactComponent as ArrowLeft } from \"../assets/chevron-back-outline.svg\";\nimport { Link } from \"react-router-dom\";\n\nconst NotePage = () => {\n  let noteId = useParams().id;\n  let [note, setNote] = useState([null]);\n  let history = useNavigate();\n\n  useEffect(() => {\n    getNote();\n  }, [noteId]);\n\n  let getNote = async () => {\n    if (noteId === \"new\") return; // if the route is /note/new then don't make api request to backend\n    let response = await fetch(`/api/notes/${noteId}/`);\n    let data = await response.json();\n    setNote(data);\n  };\n\n  let createNote = async () => {\n    fetch(`/api/notes/create/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(note),\n    });\n  };\n\n  let updateNote = async () => {\n    fetch(`/api/notes/${noteId}/update/`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(note),\n    });\n  };\n\n  let deleteNote = async () => {\n    fetch(`/api/notes/${noteId}/delete/`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    history(\"/\");\n  };\n\n  let handleSubmit = () => {\n    console.log(\"NOTE:\", note);\n    if (noteId !== \"new\" && note.body === \"\") {\n      deleteNote();\n    } else if (noteId !== \"new\") {\n      updateNote();\n    } else if (noteId === \"new\" && note.body !== null) {\n      createNote();\n    }\n    history(\"/\");\n  };\n  return (\n    <div className=\"note\">\n      <div className=\"note-header\">\n        <h3>\n          <ArrowLeft onClick={handleSubmit} />\n        </h3>\n        {noteId !== \"new\" ? (\n          <button onClick={deleteNote}>Delete</button>\n        ) : (\n          <button onClick={handleSubmit}>Done</button>\n        )}\n      </div>\n      <textarea\n        onChange={(e) => {\n          setNote({ ...note, body: e.target.value });\n        }}\n        value={note?.body}\n      ></textarea>\n    </div>\n  );\n};\n\nexport default NotePage;\n\n// could use {match} in react router v4 and v5\n\n//  import React from 'react';\n\n//  const NotePage = ({match}) => {\n//  let noteId = match.params.id\n//    return <div> Single Page {noteId}</div>;\n//  };\n\n//  export default NotePage;\n"]},"metadata":{},"sourceType":"module"}